// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CommentLike {
  id        String   @id @default(uuid())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  verified      Boolean        @default(false)
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  anonMappings  AnonMapping[]
  otp           String?
  CommentLike   CommentLike[]
}

model Post {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  isFlagged Boolean   @default(false)
}

model Comment {
  id          String        @id @default(uuid())
  content     String
  createdAt   DateTime      @default(now())
  post        Post          @relation(fields: [postId], references: [id])
  postId      String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String
  isFlagged   Boolean       @default(false)
  CommentLike CommentLike[]
}

model AnonMapping {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  anonName  String   @unique
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(uuid())
  action    String
  details   String?
  createdAt DateTime @default(now())
}
