openapi: 3.0.3
info:
  title: Blind App API
  description: Anonymous communication platform for college communities
  version: 1.0.0
  contact:
    name: Blind App Team
    url: https://github.com/NalinDalal/blind-app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://your-domain.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server
security:
  - bearerAuth: []
paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with college email validation
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  pattern: '^[\w.-]+@oriental\.ac\.in$'
                  description: Valid college email address
                  example: student@oriental.ac.in
                password:
                  type: string
                  minLength: 6
                  description: User password (minimum 6 characters)
                  example: securePassword123
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: User with this email already exists
        '500':
          $ref: '#/components/responses/InternalServerError'
  /login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive JWT token
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: student@oriental.ac.in
                password:
                  type: string
                  example: securePassword123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token (expires in 2 hours)
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  id:
                    type: string
                    description: User unique identifier
                    example: usr_12345
                  email:
                    type: string
                    description: User email address
                    example: student@oriental.ac.in
                  anonName:
                    type: string
                    nullable: true
                    description: Anonymous display name (null if not set)
                    example: Anonymous_Tiger
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Invalid credentials
        '500':
          $ref: '#/components/responses/InternalServerError'
  /request-otp:
    post:
      tags:
        - Authentication
      summary: Request OTP
      description: Send a 6-digit OTP to user's email (rate limited to 30 seconds)
      operationId: requestOTP
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  pattern: '^[\w.-]+@oriental\.ac\.in$'
                  description: Valid college email address
                  example: student@oriental.ac.in
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP sent to your email.
        '400':
          description: Invalid email or missing email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_email:
                  value:
                    error: Email required
                invalid_email:
                  value:
                    error: Only college emails (@oriental.ac.in) are allowed.
        '409':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Please wait before requesting another OTP.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /verify-otp:
    post:
      tags:
        - Authentication
      summary: Verify OTP
      description: Verify OTP code and mark user as verified
      operationId: verifyOTP
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                  example: student@oriental.ac.in
                otp:
                  type: string
                  pattern: '^[0-9]{6}$'
                  description: 6-digit OTP code (valid for 2 minutes)
                  example: '123456'
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP verified
                  id:
                    type: string
                    example: usr_12345
                  email:
                    type: string
                    example: student@oriental.ac.in
                  anonName:
                    type: string
                    nullable: true
                    example: Anonymous_Tiger
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: User not found or invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                user_not_found:
                  value:
                    error: User not found
                invalid_otp:
                  value:
                    error: Invalid or expired OTP
        '500':
          $ref: '#/components/responses/InternalServerError'
  /anon/set:
    post:
      tags:
        - User Management
      summary: Set anonymous name
      description: Set or update user's anonymous display name
      operationId: setAnonName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - anonName
              properties:
                anonName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: Anonymous display name
                  example: Anonymous_Tiger
      responses:
        '200':
          description: Anonymous name set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Anonymous name updated successfully
                  anonName:
                    type: string
                    example: Anonymous_Tiger
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /post:
    post:
      tags:
        - Content
      summary: Create a post
      description: Create a new post in the community
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  description: Post content
                  example: This is my first post on the blind app!
                college:
                  type: string
                  description: College identifier
                  example: oriental
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Content
      summary: Get posts
      description: Retrieve paginated list of posts
      operationId: getPosts
      parameters:
        - name: page
          in: query
          description: Page number (default: 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Posts per page (default: 10, max: 50)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /comment:
    post:
      tags:
        - Content
      summary: Create a comment
      description: Add a comment to a post
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - postId
                - content
              properties:
                postId:
                  type: string
                  description: ID of the post to comment on
                  example: post_12345
                content:
                  type: string
                  minLength: 1
                  maxLength: 500
                  description: Comment content
                  example: Great post! Thanks for sharing.
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /like-comment:
    post:
      tags:
        - Content
      summary: Like or unlike a comment
      description: Toggle like status on a comment
      operationId: toggleCommentLike
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - commentId
              properties:
                commentId:
                  type: string
                  description: ID of the comment to like/unlike
                  example: comment_12345
      responses:
        '200':
          description: Like status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                    description: Current like status
                    example: true
                  likeCount:
                    type: integer
                    description: Total likes for this comment
                    example: 5
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /notification:
    get:
      tags:
        - User Management
      summary: Get user notifications
      description: Retrieve user's notifications
      operationId: getNotifications
      parameters:
        - name: unread
          in: query
          description: Filter for unread notifications only
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /token:
    post:
      tags:
        - Authentication
      summary: Refresh or validate token
      description: Refresh JWT token or validate current token
      operationId: refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: New JWT token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  expiresIn:
                    type: integer
                    description: Token expiration time in seconds
                    example: 7200
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
    Post:
      type: object
      properties:
        id:
          type: string
          example: post_12345
        content:
          type: string
          example: This is my first post!
        userId:
          type: string
          example: usr_12345
        college:
          type: string
          example: oriental
        createdAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
        author:
          type: object
          properties:
            anonName:
              type: string
              example: Anonymous_Tiger
        _count:
          type: object
          properties:
            comments:
              type: integer
              example: 5
      required:
        - id
        - content
        - userId
        - createdAt
    Comment:
      type: object
      properties:
        id:
          type: string
          example: comment_12345
        content:
          type: string
          example: Great post!
        postId:
          type: string
          example: post_12345
        userId:
          type: string
          example: usr_12345
        createdAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
        author:
          type: object
          properties:
            anonName:
              type: string
              example: Anonymous_Tiger
        _count:
          type: object
          properties:
            likes:
              type: integer
              example: 3
      required:
        - id
        - content
        - postId
        - userId
        - createdAt
    Notification:
      type: object
      properties:
        id:
          type: string
          example: notif_12345
        type:
          type: string
          enum: [comment, like, mention, system]
          example: comment
        title:
          type: string
          example: New comment on your post
        content:
          type: string
          example: Anonymous_Tiger commented on your post
        read:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
      required:
        - id
        - type
        - title
        - read
        - createdAt
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false
      required:
        - page
        - limit
        - total
        - totalPages
        - hasNext
        - hasPrev
  responses:
    BadRequest:
      description: Bad request - Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Invalid input data
    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Authentication required
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Internal server error
tags:
  - name: Authentication
    description: User authentication and authorization
  - name: User Management  
    description: User profile and settings management
  - name: Content
    description: Posts, comments, and content management
